'''
Scrivere una classe contocorrente che rappresenta un conto corrente bancario. Il conto è rappresentato da uno username, un id e un saldo. 
Successivamente scrivere la classe bancomat che inizializza una lista di conticorrenti e permette di prelevare dal conto, versare sul conto, 
fare un bonifico, visualizzare il saldo (plus se nel saldo riusciamo a visualizzare la lista movimenti). 
Inoltre scrivere un programma che permette all'utente di usufruire del bancomat dopo aver digitato lo username e l'id corretto associato al conto.
'''

import decimal
import pickle
import matplotlib.pyplot as plt


class Contocorrente:
    def __init__(self, username, id, saldo):
        self.username = username
        self.id = id
        self.saldo = decimal.Decimal(saldo)
        self.movimenti = []
        self.bonifici_entrata = 0
        self.bonifici_uscita = 0
        self.versamenti = 0
        self.prelievi = 0

    def __str__(self):
        return f"Username: {self.username}, ID conto: {self.id}, Saldo: € {f'{round(self.saldo, 2):,}'}\n"


class Bancomat:
    def __init__(self, conti):
        self.conti = conti

    def __str__(self):
        return self.conti

    def prelievo(self, cifra, user_id):
        for c in self.conti:
            if c.id == user_id:
                if c.saldo >= cifra:
                    c.saldo -= cifra
                    c.movimenti.append(f"Prelievo: -{f'{round(cifra, 2):,}'}")
                    c.prelievi += round(cifra, 2)
                else:
                    print("\nCifra non disponibile.")
                print(f"\nIl saldo aggiornato è di € {f'{round(c.saldo, 2):,}'}")

    def versamento(self, cifra, user_id):
        for x in self.conti:
            if x.id == user_id:
                x.saldo += cifra
                x.movimenti.append(f"Versamento: +{f'{round(cifra, 2):,}'}")
                x.versamenti += cifra
                print(f"\nIl saldo aggiornato è di € {f'{round(x.saldo, 2):,}'}")

    def bonifico(self, cifra, mittente, destinatario):
        if input("\nScegli 1 per bonifico veloce, un tasto qualsiasi per bonifico normale: ") == "1":
            comm = decimal.Decimal(2.50)
        else:
            comm = decimal.Decimal(1.10)
        for dest in self.conti:
            if dest.id == destinatario:
                dest.saldo += cifra
                dest.bonifici_entrata += cifra
                dest.movimenti.append(f"Bonifico in entrata: +{f'{round(cifra, 2):,}'}")
        for mitt in self.conti:
            if mitt.id == mittente:
                if mitt.saldo >= cifra + comm:
                    mitt.saldo = mitt.saldo - cifra - comm
                    mitt.movimenti.append(f"Bonifico in uscita: -{f'{round(cifra, 2):,}'}, comm -{f'{round(comm, 2):,}'}")
                    mitt.bonifici_uscita += (cifra + comm)
                    print(f"\nIl saldo aggiornato è di € {f'{round(mitt.saldo, 2):,}'}")
                else:
                    print("\nCifra non disponibile.")

    def stampa_saldo(self, user_id):
        for y in self.conti:
            if y.id == user_id:
                print(f"\n\nIl saldo aggiornato è di € {f'{round(y.saldo, 2):,}'}")

    def stampa_movimenti(self, user_id):
        for z in self.conti:
            if z.id == user_id:
                print("\n\nLa lista dei movimenti: \n")
                for mov in z.movimenti:
                    print(mov)

    def stampa_grafico(self, user_id):
        categories = ['Prelievi', 'Versamenti', 'Bonifici\nin\nentrata', 'Bonifici\nin\nuscita']
        for i in self.conti:
            if i.id == user_id:
                values = [round(i.prelievi, 2), round(i.versamenti, 2), round(i.bonifici_entrata, 2), round(i.bonifici_uscita, 2)]
                plt.pie(values, labels=categories, autopct='%1.1f%%')
                plt.title("Grafico a torta")
                plt.show()


'''Da eseguire solo al primo avvio per memorizzare nel file i conti inizializzati
utente1 = Contocorrente("User 1", "01", decimal.Decimal(10000))
utente2 = Contocorrente("User 2", "02", decimal.Decimal(30000))
lista_utenti = []
lista_utenti.append(utente1)
lista_utenti.append(utente2)

f = open("bancomat.pkl", "wb")
pickle.dump(lista_utenti, f)
f.close()'''


f = open("bancomat.pkl", "rb")
unpickler = pickle.Unpickler(f)
lista_utenti = unpickler.load()
bancomat = Bancomat(lista_utenti)


print("\n\nBenvenuto!\n")

validation = False
idcode = 0
while not validation:
    user = input("digita il tuo username: ")
    idcode = input("\ndigita il tuo ID utente: ")
    for u in lista_utenti:
        if user == u.username and idcode == u.id:
            validation = True
            print("\nUtente convalidato.")
    if not validation:
        print("\nUtente non trovato. Riprova.\n")

scelta = 0
if validation:
    while scelta != "7":
        scelta = input("\n\nDigitare\n"
                       "1 per prelevare\n"
                       "2 per versare\n"
                       "3 per effettuare un bonifico\n"
                       "4 per visualizzare il saldo\n"
                       "5 per visualizzare l'elenco movimenti\n"
                       "6 per visualizzare il grafico dei tuoi movimenti\n"
                       "7 per terminare: ")

        if scelta == "1":
            importo = decimal.Decimal(input("\nInserisci la cifra da prelevare: "))
            bancomat.prelievo(importo, idcode)
        elif scelta == "2":
            importo = decimal.Decimal(input("\nInserisci la cifra da versare: "))
            bancomat.versamento(importo, idcode)
        elif scelta == "3":
            verso = input("\nInserisci l'id del destinatario: ")
            importo = decimal.Decimal(input("Inserisci l'importo del bonifico: "))
            bancomat.bonifico(importo, idcode, verso)
        elif scelta == "4":
            bancomat.stampa_saldo(idcode)
        elif scelta == "5":
            bancomat.stampa_movimenti(idcode)
        elif scelta == "6":
            bancomat.stampa_grafico(idcode)
        elif scelta == "7":
            pass
        else:
            print("Scelta non valida.")

print("\n\nHo effettuato il logout.\n\n")

f = open("bancomat.pkl", "wb")
pickle.dump(lista_utenti, f)
f.close()
