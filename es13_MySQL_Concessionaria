'''
Creiamo una classe auto: ogni auto possiede una marca, un colore e uno stato optional che può essere “base” o “full optional”.
Successivamente creare una finestra dove l’utente può scegliere (ATTRAVERSO UNA COMBOBOX) tra una serie di scelte es: “Fiat, Ford, etc.”.
L’utente cliccando il pulsante riceverà una mail con il prezzo dell’auto da lui scelta (inserire una entry per la mai dell’utente).
Inoltre l’auto opzionata sarà inserita in una tabella di nome autoOpzionata con queste intestazioni :id : (potete usare l’autoincrement), marca, colore e prezzo.
'''

import tkinter as tk
from tkinter import ttk
import mysql.connector
import matplotlib.pyplot as plt
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet

mydb = mysql.connector.connect(
  host="localhost",
  user="root",
  password="pyThon23@_",
  database="concessionaria"
)

''' creo una tabella per le auto ordinate
mycursor = mydb.cursor()
mycursor.execute("CREATE TABLE autoOpzionata (Id INT AUTO_INCREMENT PRIMARY KEY, "
                 "Email VARCHAR(255), Marca VARCHAR(255), Colore VARCHAR(255), "
                 "Dotazione VARCHAR(255), Prezzo VARCHAR(255))")


#Creazione tabella password gestore
mycursor = mydb.cursor()
mycursor.execute("CREATE TABLE tabpass (mail VARCHAR(255), password VARCHAR(255))")


#Inserimento mail e password gestore
mycursor = mydb.cursor()
sql = "INSERT INTO tabpass (mail, password) VALUES (%s, %s)"
val = ("gestore@mail.it", "passgestore")
mycursor.execute(sql, val)
mydb.commit()
'''


class Prezzi:
    def __init__(self, elemento, prezzo):
        self.elemento = elemento
        self.prezzo = prezzo


def mostra_selezione(listamar, listacol, listadot):
    pag_sel = tk.Tk()
    pag_sel.geometry('%dx%d+%d+%d' % (500, 360, 450, 100))

    sel_marca = cbmarche.get()
    sel_colore = cbcolori.get()
    sel_dotazione = cboptionals.get()

    lbl = tk.Label(pag_sel, text=f"\n\nLa tua selezione:\n\n {sel_marca}, colore {sel_colore}, {sel_dotazione}.\n\n",
                            width=50, height=5, font=("arial", 12, "bold"))
    lbl.grid(column=0, row=0, columnspan=2)
    lbl_mail = tk.Label(pag_sel, text="Inserisci email per richiedere il preventivo", width=40, height=4,
                        font=("arial", 11, "bold"))
    lbl_mail.grid(column=0, row=1, columnspan=2)
    email = tk.Entry(pag_sel, width=30)
    email.grid(column=0, row=2, columnspan=2)
    lbl_prev = tk.Label(pag_sel, width=40, height=5, font=("arial", 12, "bold"))
    lbl_prev.grid(column=0, row=3, columnspan=2)
    btnConferma = tk.Button(pag_sel, text="Richiedi preventivo",
                  command=lambda: invia_preventivo(), width=20, height=2, font=("arial", 12, "bold"))
    btnConferma.grid(column=0, row=4)
    btnAnnulla = tk.Button(pag_sel, text="Annulla ordine", command=lambda: pag_sel.destroy(),
                           width=20, height=2, font=("arial", 12, "bold"))
    btnAnnulla.grid(column=1, row=4)


    # ___________________ SEZIONE CLIENTE _____________________________
    def invia_email(destinatario, oggetto, corpo):
        # Configura il server SMTP per inviare l'email (in questo esempio utilizzo Gmail)
        smtp_server = "smtp.gmail.com"
        port = 587
        sender_email = "pythonprova2023@gmail.com"  # Inserisci il tuo indirizzo email
        sender_password = "pythoN2023##"  # Inserisci la tua app password (not email password!)

        # Messaggio email
        message = MIMEMultipart()
        message["From"] = sender_email
        message["To"] = destinatario
        message["Subject"] = oggetto
        message.attach(MIMEText(corpo, "plain"))

        # Connessione e invio dell'email
        try:
            server = smtplib.SMTP(smtp_server, port)
            server.starttls()
            server.login(sender_email, sender_password)
            server.sendmail(sender_email, destinatario, message.as_string())
            print("Email inviata con successo!")
        except Exception as e:
            print("Errore nell'invio dell'email:", str(e))
        finally:
            server.quit()


    def invia_preventivo():
        mail = email.get()
        preventivo = 0
        for marca in listamar:
            if sel_marca == marca.elemento:
                preventivo += marca.prezzo
                for colore in listacol:
                    if sel_colore == colore.elemento:
                        preventivo += colore.prezzo
                        for dotazione in listadot:
                            if sel_dotazione == dotazione.elemento:
                                preventivo += dotazione.prezzo
        lbl_prev.configure(text=f"Il prezzo finale è di € {f'{preventivo:,}'}")
        btnConferma.configure(text="Invia ordine", command=lambda: [invia_ordine(), pag_sel.destroy(), root.destroy()])

        obj = "Richiesta preventivo"
        body = f"Il prezzo finale è di € {f'{preventivo:,}'}"

        invia_email(mail, obj, body)


        def invia_ordine():
            pag_invia = tk.Tk()
            pag_invia.geometry('%dx%d+%d+%d' % (500, 360, 450, 100))

            mycursor = mydb.cursor()
            sql = "INSERT INTO autoOpzionata (Email, Marca, Colore, Dotazione, Prezzo) VALUES (%s, %s, %s, %s, %s)"
            val = (mail, sel_marca, sel_colore, sel_dotazione, preventivo)
            mycursor.execute(sql, val)
            mydb.commit()

            lbl_conferm = tk.Label(pag_invia, text=f"\nOrdine registrato.\n\n\nDi seguito i dettagli:\n\n "
                            f"{sel_marca}, colore {sel_colore}, {sel_dotazione}.\n\nTotale importo "
                            f"€ {f'{preventivo:,}'}.\n\n\nRiceverai una email di conferma dell'ordine.\n\nGrazie "
                            f"per averci scelto.\n", width=50, font=("arial", 12, "bold"))
            lbl_conferm.grid(column=0, row=0)

            btnEsc = tk.Button(pag_invia, text="Esci", command=lambda: pag_invia.destroy(),
                                   width=20, height=2, font=("arial", 12, "bold"))
            btnEsc.grid(column=0, row=1)

#______________________FINE SEZIONE CLIENTE  _______________________


#______________________SEZIONE GESTORE  ____________________________
def gestore():
    # crea pagina gestore
    pag_in_gestore = tk.Tk()
    pag_in_gestore.geometry('%dx%d+%d+%d' % (480, 320, 450, 100))

    lbl_benvenuto = tk.Label(pag_in_gestore, text="\nBentornato!\n\nInserisci le tue credenziali per accedere:\n",
                             width=35, height=4, font=("arial", 16, "bold"))
    lbl_benvenuto.grid(column=0, row=0, columnspan=2)

    lbl_mail = tk.Label(pag_in_gestore, text="Inserisci email", width=18, height=3, font=("arial", 11, "bold"))
    lbl_mail.grid(column=0, row=1)
    email = tk.Entry(pag_in_gestore, width=30)
    email.grid(column=1, row=1)

    lbl_pw = tk.Label(pag_in_gestore, text="Inserisci password", font=("arial", 11, "bold"), width=18, height=3)
    lbl_pw.grid(column=0, row=2)
    password = tk.Entry(pag_in_gestore, show="*", width=30)
    password.grid(column=1, row=2)

    pag_in_gestore.rowconfigure(3, weight=1)  # riga vuota

    btn_accedi = tk.Button(pag_in_gestore, text="ACCEDI", fg="black", command=lambda: invia_gestore(lbl_benvenuto),
                           width=18, height=2, font=("arial", 12, "bold"))
    btn_accedi.grid(column=0, row=4)

    btn_esci = tk.Button(pag_in_gestore, text="ESCI", fg="black", command=lambda: pag_in_gestore.destroy(),
                         width=18, height=2, font=("arial", 12, "bold"))
    btn_esci.grid(column=1, row=4)

    pag_in_gestore.rowconfigure(5, weight=1)  # riga vuota


    def invia_gestore(lbl):
        accesso = False
        mail = email.get()
        pw = password.get()
        mycursor = mydb.cursor()
        sql = f"SELECT * FROM tabpass WHERE mail = '{mail}'"
        mycursor.execute(sql)
        verifica_user = mycursor.fetchall()
        if len(verifica_user) > 0:
            for u in verifica_user:
                if u[0] != mail or u[1] != pw:
                    lbl.configure(text="\nCredenziali invalide. Riprova ad accedere.\n")
                else:
                    accesso = True
        else:
            lbl.configure(text="\nCredenziali invalide. Riprova ad accedere.\n")

        if accesso:
            # apro una nuova pagina
            pag_menu = tk.Tk()
            pag_menu.geometry('%dx%d+%d+%d' % (520, 520, 450, 100))
            # lista delle operazioni
            lbl_menu = tk.Label(pag_menu, text="Benvenuto nella pagina gestore.\nSeleziona un'operazione.",
                                width=40, height=4, font=("arial", 16, "bold"))
            lbl_menu.grid(column=0, row=0)

            incassi = tk.Button(pag_menu, text="Stampa\ntotale vendite", fg="black", command=lambda: stampa_incassi(),
                                width=20, height=4, font=("arial", 12, "bold"))
            incassi.grid(column=0, row=1)

            pag_menu.rowconfigure(2, weight=1)  # riga vuota

            ordini = tk.Button(pag_menu, text="Stampa\nelenco vendite", fg="black", command=lambda: stampa_ordini(),
                               width=20, height=4, font=("arial", 12, "bold"))
            ordini.grid(column=0, row=3)

            pag_menu.rowconfigure(4, weight=1)  # riga vuota

            grafici = tk.Button(pag_menu, text="Visualizza\nstatistiche", fg="black",
                                command=lambda: stampa_statistiche(),
                                width=20, height=4, font=("arial", 12, "bold"))
            grafici.grid(column=0, row=5)

            pag_menu.rowconfigure(6, weight=1)  # riga vuota

            esci = tk.Button(pag_menu, text="Effettua il logout", fg="black", command=lambda: pag_menu.destroy(),
                             width=35, height=3, font=("arial", 12, "bold"))
            esci.grid(column=0, row=7)

            pag_menu.rowconfigure(8, weight=1)  # riga vuota


    def stampa_incassi():
        pag_incassi = tk.Tk()
        pag_incassi.geometry('%dx%d+%d+%d' % (520, 250, 450, 100))
        totale_incassi = calcola_incassi()

        lbl_incassi = tk.Label(pag_incassi, text=f"\nIl totale delle vendite è € {f'{totale_incassi:,}'}\n",
                               width=40, height=5, font=("arial", 16, "bold"))
        lbl_incassi.grid(column=0, row=0)

        btn_esci = tk.Button(pag_incassi, text="Torna al menù precedente", fg="black",
                             command=lambda: pag_incassi.destroy(), width=40, height=3, font=("arial", 12, "bold"))
        btn_esci.grid(column=0, row=1)


    def calcola_incassi():
        mycursor = mydb.cursor()
        mycursor.execute("SELECT * FROM autoOpzionata")
        myresult = mycursor.fetchall()
        incassi = 0
        for x in myresult:
            incassi += int(x[5])
        return incassi


    def stampa_ordini():
        mycursor = mydb.cursor()
        mycursor.execute("SELECT * FROM autoOpzionata")
        elenco_ord = mycursor.fetchall()

        # ricavo una stringa dal database per poterla visualizzare nella label
        stringa_ordini = "\n"
        stringa = ""
        cont = 1
        for riga in elenco_ord:
            cliente = str(riga[1])
            marca = str(riga[2])
            colore = str(riga[3])
            dotazione = str(riga[4])
            prezzo = int(riga[5])
            stringa_ordini += stringa.join(f"{cont}. {cliente} - {marca} - colore {colore} - dotazione {dotazione}  - {f'{prezzo:,}'}€\n")
            cont += 1

        #aggiungo il totale incassi
        tot_incassi = calcola_incassi()

        # creo nuova pagina
        pag_ordini = tk.Tk()
        pag_ordini.geometry('%dx%d+%d+%d' % (620, 450, 450, 100))

        lbl_lista = tk.Label(pag_ordini, text="\nEcco l'elenco degli ordini ricevuti:\n",
                             width=50, font=("arial", 12, "bold"))
        lbl_lista.grid(column=0, row=0, columnspan=2)

        lbl_ordini = tk.Label(pag_ordini, text=stringa_ordini, justify="left", width=70, font=("arial", 13))
        lbl_ordini.grid(column=0, row=1, columnspan=2)

        lbl_incassi = tk.Label(pag_ordini, text=f"\n\nIl totale delle vendite è {f'{tot_incassi:,}'}€\n\n\n\n",
                               width=50, font=("arial", 12, "bold"))
        lbl_incassi.grid(column=0, row=2, columnspan=2)

        btn_salva = tk.Button(pag_ordini, text="Salva lista", fg="black",
                             command=lambda: salva_reportlab_pdf(elenco_ord, tot_incassi, btn_salva),
                             width=20, height=3, font=("arial", 12, "bold"))
        btn_salva.grid(column=0, row=3)

        btn_esci = tk.Button(pag_ordini, text="Torna al menù precedente", fg="black",
                             command=lambda: pag_ordini.destroy(), width=20, height=3, font=("arial", 12, "bold"))
        btn_esci.grid(column=1, row=3)


    def salva_reportlab_pdf(elenco, totale, button):
        # Creo un nuovo documento PDF con reportlab
        doc = SimpleDocTemplate("lista_ordini.pdf", pagesize=letter)
        styles = getSampleStyleSheet()
        # Aggiungo la lista testuale al documento PDF tramite un ciclo
        content = []
        content.append(Paragraph(f"Elenco ordini:\n\n", styles['Heading2']))
        cont = 1
        for riga in elenco:
            content.append(Paragraph(f"{cont}. {riga[1]} - {riga[2]} - colore {riga[3]} - dotazione {riga[4]} - {f'{int(riga[5]):,}'} €\n", styles['Heading4']))
            cont += 1
        # Aggiungo l'incasso totale al documento PDF
        content.append(Spacer(1, 12))
        content.append(Paragraph(f"Incasso Totale: {f'{totale:,}'} €", styles['Heading2']))
        #Salvo la lista
        doc.build(content)
        button.configure(text="Lista salvata")


    def stampa_statistiche():
        tot_fiat = 0
        tot_peugeot = 0
        tot_toyota = 0
        tot_land_rover = 0

        mycursor = mydb.cursor()

        #RICAVO I DATI SUDDIVISI PER CLIENTE
        mycursor.execute("SELECT * FROM autoOpzionata")
        myresult = mycursor.fetchall()
        tot_cliente = 0
        valori = []
        lista_mail = []

        # Creo una lista di email
        for riga in myresult:
            if riga[1] not in lista_mail:
                lista_mail.append(str(riga[1]))

        # Creo una somma di prezzi per ogni email
        for mail in lista_mail:
            for riga in myresult:
                if str(mail) == str(riga[1]):
                    tot_cliente += int(riga[5])
            valori.append(tot_cliente)


        #RICAVO I DATI SUDDIVISI PER MARCA
        sql = "SELECT * FROM autoOpzionata WHERE marca = 'Fiat'"
        mycursor.execute(sql)
        lista_auto = mycursor.fetchall()
        for auto in lista_auto:
            prezzo = int(auto[5])
            tot_fiat += prezzo

        sql = "SELECT * FROM autoOpzionata WHERE marca = 'Peugeot'"
        mycursor.execute(sql)
        lista_auto = mycursor.fetchall()
        for auto in lista_auto:
            prezzo = int(auto[5])
            tot_peugeot += prezzo

        sql = "SELECT * FROM autoOpzionata WHERE marca = 'Toyota'"
        mycursor.execute(sql)
        lista_toyota = mycursor.fetchall()
        for auto in lista_auto:
            prezzo = int(auto[5])
            tot_fiat += prezzo

        sql = "SELECT * FROM autoOpzionata WHERE marca = 'Land Rover'"
        mycursor.execute(sql)
        lista_auto = mycursor.fetchall()
        for auto in lista_auto:
            prezzo = int(auto[5])
            tot_land_rover += prezzo

        # dati per grafici
        cat = ['Fiat', 'Peugeot', 'Toyota', 'Land Rover']
        val = [tot_fiat, tot_peugeot, tot_toyota, tot_land_rover]

        # griglia grafici
        plt.subplots(2, 2)
        # grafico 1
        plt.subplot(2, 2, 1)
        plt.bar(cat, val)
        plt.title("Vendite per marca")
        # grafico 2
        plt.subplot(2, 2, 2)
        plt.pie(val, labels=cat, autopct='%1.1f%%')
        plt.title("Vendite per marca")
        # grafico 3
        plt.subplot(2, 2, 3)
        plt.bar(lista_mail, valori)
        plt.title("Vendite per cliente")
        # grafico 2
        plt.subplot(2, 2, 4)
        plt.pie(valori, labels=lista_mail, autopct='%1.1f%%')
        plt.title("Vendite per cliente")

        plt.tight_layout()
        plt.show()

#______________________FINE SEZIONE GESTORE  _______________________

#inizializzazione lista auto
marche = ["Fiat", "Peugeot", "Toyota", "Land Rover"]
colori = ["rosso", "nero", "grigio", "Bianco"]
dotazioni = ["base", "full optionals"]

marca1 = Prezzi("Fiat", 10000)
marca2 = Prezzi("Peugeot", 20000)
marca3 = Prezzi("Toyota", 30000)
marca4 = Prezzi("Land Rover", 40000)
colore1 = Prezzi("rosso", 3000)
colore2 = Prezzi("nero", 2000)
colore3 = Prezzi("grigio", 2500)
colore4 = Prezzi("bianco", 1500)
dotazione1 = Prezzi("base", 0)
dotazione2 = Prezzi("full optionals", 10000)

listino_marche = []
listino_colori = []
listino_dotazioni = []

listino_marche.append(marca1)
listino_marche.append(marca2)
listino_marche.append(marca3)
listino_marche.append(marca4)
listino_colori.append(colore1)
listino_colori.append(colore2)
listino_colori.append(colore3)
listino_colori.append(colore4)
listino_dotazioni.append(dotazione1)
listino_dotazioni.append(dotazione2)

#Interfaccia pagina iniziale
root = tk.Tk()

root.geometry('%dx%d+%d+%d' % (500, 300, 450, 100))

lbl_benvenuto = tk.Label(root, text="\nBenvenuto nella nostra concessionaria!\n\nConfigura il tuo modello:\n",
                         width=50, height=4, font=("arial", 13, "bold"))
lbl_benvenuto.grid(column=0, row=0)

cbmarche = ttk.Combobox(root, values=marche, width=35, height=4, font=("arial", 13))
cbmarche.grid(column=0, row=1)
root.rowconfigure(2, weight=1) #riga vuota
cbcolori = ttk.Combobox(root, values=colori, width=35, height=4, font=("arial", 13))
cbcolori.grid(column=0, row=3)
root.rowconfigure(4, weight=1) #riga vuota
cboptionals = ttk.Combobox(root, values=dotazioni, width=35, height=4, font=("arial", 13))
cboptionals.grid(column=0, row=5)
root.rowconfigure(6, weight=1) #riga vuota

btnselezione = tk.Button(root, text="Mostra Selezione",
                         command=lambda: mostra_selezione(listino_marche, listino_colori, listino_dotazioni),
                         width=20, height=1, font=("arial", 12, "bold"))
btnselezione.grid(column=0, row=7)

root.rowconfigure(8, weight=5) #riga vuota

btn_gestore = tk.Button(root, text="Clicca qui per andare alla pagina gestore", fg="black",
                        command=lambda: [gestore(), root.destroy()],
                        width=35, height=2, font=("arial", 8, "bold"))
btn_gestore.grid(column=0, row=9, columnspan=2)

root.rowconfigure(10, weight=3) #riga vuota

root.mainloop()
