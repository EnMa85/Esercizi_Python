'''
Creare un programma distributore ogni ditributore ha associato un oggetto di tipo conto con proprietà saldo 
che rappresenta il saldo del conto, e id che rappresenta l'id del conto. 
L'oggetto distributore può invece: erogare caffè, erogare the, erogare acqua, erogare cioccolata a prezzi variabili, 
versare dei soldi nel conto. Il programma nel menu utente permette anche di creare un nuovo id con un nuovo saldo
'''

#importa metodo che sospende il programma per n secondi
from time import sleep

#contiene saldo ed id utente univoco
class Conto:
    def __init__(self, saldo, id):
        self.saldo = saldo
        self.id = id

    def __str__(self):
        return (f"\nIl saldo del conto è: {self.saldo}")

#contiene un elenco di conti
class Distributore:
    def __init__(self, conti):
        self.conti = conti

    def __str__(self):
        return self.conti

    #riceve in ingresso un dizionario con bevande e prezzi, il codice dell'elemento scelto, l'id dell'utente loggato
    def eroga(self, menu, elemento, id_attivo):
        indice = 0
        #identifica la bevanda
        for bev, pr in menu.items():
            indice += 1
            if indice == elemento:
                #identifica l'utente attivo tramite id
                for conto in self.conti:
                    if conto.id == id_attivo:
                        #verifica che il saldo sia sufficiente
                        if(conto.saldo >= pr):
                            print(f"\nErogazione {bev} in corso...")
                            conto.saldo -= pr
                            sleep(1)
                            print("Erogazione effettuata.\n")
                            print(f"Il tuo saldo aggiornato è di € {conto.saldo}")
                        else: print("Saldo non sufficiente, effettua un versamento.\n")

    def versamento(self, cifra, id_attivo):
        for el in self.conti:
            if el.id == id_attivo:
                el.saldo += cifra
                print(f"\nIl saldo aggiornato è di € {el.saldo}")

    def nuovo_id(self):
        nuovo_id = Conto(0, (len(self.conti)+1))
        self.conti.append(nuovo_id)
        return nuovo_id.id

    def saldo(self, id_attivo):
        for el in self.conti:
            if el.id == id_attivo:
                print(f"\nIl tuo saldo è di € {el.saldo}")

#inizializza due utenti di tipo class Conto
id1 = Conto(2.0, 1)
id2 = Conto(7.5, 2)

#crea una lista e ci inserisce i due id conti creati
lista_conti = []
lista_conti.append(id1)
lista_conti.append(id2)

#inserisce in un elenco di tipo Distributore la lista appena creata di conti di tipo Conto
distr1 = Distributore(lista_conti)


dizio_bevande = {
    "Caffe"      : 0.80,
    "The"        : 1.20,
    "Acqua"      : 1.00,
    "Cioccolata" : 1.10
}


print("Benvenuto!!!")

scelta = 0
validation = False
idcode = 0

#ripete la sequenza finchè non viene inserito un id utente valido
while scelta != "1" and scelta != "2":
    scelta = input("\nDigita 1 per creare un nuovo utente, 2 per accedere con il tuo ID: ")
    if scelta == "1":
        #crea un nuovo ID e poi imposta la scelta su 2 per slittare l'utente nella fase di login
        nuovo_id = distr1.nuovo_id()
        print(f"\nNuovo utente creato. Il tuo ID è {nuovo_id}.\nInserisci la chiave ed effettua un versamento per effettuare altre operazioni: \n")
        scelta = "2"

    if scelta == "2":
        #ripete la sequenza finchè non riconosce un utente valido
        while validation == False:
            #salva l'id dell'utente corrente per passarlo ai vari metodi
            idcode = int(input("\ninserisci la tua chiave ID: "))
            for el in lista_conti:
                if idcode == el.id:
                    validation = True
                    print("\nChiave valida.")
            if validation == False:
                print("\nChiave non riconosciuta. Riprova.\n")

cont = 0
scelta = 0
bevanda = 0

#dopo aver validato l'utente, verifica nuovamente che lo stato sia validato e stampa il menù di scelta
if validation == True:
    while scelta != "4":
        scelta = input("\nDigitare\n"
                       "1 per scegliere una bevanda\n"
                       "2 per effettuare un versamento nel tuo conto\n"
                       "3 per visualizzare il tuo saldo\n"
                       "4 per terminare: ")

        #per ogni scelta passerà al metodo l'id dell'utente corrente precedentemente salvato
        if scelta == "1":
            print("\n")
            for bevanda, prezzo in dizio_bevande.items():
                print(f"{cont+1}. {bevanda}: € {prezzo}")
                cont += 1
            bevanda = int(input("\nInserisci il codice della bevanda: "))
            distr1.eroga(dizio_bevande, bevanda, idcode)

        elif scelta == "2":
            distr1.versamento(int(input("Versa cifra: ")), idcode)

        elif scelta == "3":
            distr1.saldo(idcode)

        elif scelta == "4":
            print("\nHo effettuato il logout.\n")
            exit()
            
        else: print("Scelta non valida.")
